// Generated by CoffeeScript 1.6.3
(function() {
  var Button, Control, Fragment, FullScreen, NextFragment, NextPage, Page, PageInfo, PreviousFragment, PreviousPage, ProgressBar, Show, Slide, Util, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Util = {
    has_class: function(elem, cls) {
      return (' ' + elem.className + ' ').indexOf(' ' + cls + ' ') > -1;
    },
    add_class: function(elem, cls) {
      if (!this.has_class(elem, cls)) {
        return elem.className += ' ' + cls;
      }
    },
    remove_class: function(elem, cls) {
      if (this.has_class(elem, cls)) {
        return elem.className = elem.className.replace(cls, ' ').replace('  ', ' ');
      }
    },
    add_event: function(elem, event, fn) {
      if (document.addEventListener) {
        return elem.addEventListener(event, fn);
      } else {
        return elem.attachEvent('on' + event, fn);
      }
    },
    full_screen: function(elem) {
      if (elem == null) {
        elem = document.documentElement;
      }
      if (elem.requestFullscreen) {
        return elem.requestFullscreen();
      } else if (elem.mozRequestFullScreen) {
        return elem.mozRequestFullScreen();
      } else if (elem.webkitRequestFullscreen) {
        return elem.webkitRequestFullscreen();
      } else if (elem.msRequestFullscreen) {
        return elem.msRequestFullscreen();
      }
    }
  };

  Slide = (function() {
    function Slide(config) {
      this.config = config;
      this.id = this.config.id;
      this.cycle = this.config.cycle;
      this["break"] = (this.config["break"] || 'hr').toUpperCase();
      this.height = (this.config.height || 600) + 'px';
      this.node = document.getElementById(this.id);
      Util.add_class(this.node, 'sj');
      this.show = new Show(this);
      if (this.show.length !== -1) {
        this.control = new Control(this);
        this.progress_bar = new ProgressBar(this);
      }
      this.enable = false;
    }

    Slide.prototype.is_enable = function() {
      return this.enable;
    };

    Slide.prototype.start = function() {
      if (!this.enable) {
        this.enable = true;
        this.show.start();
        this.control.start();
        this.progress_bar.start();
        return this.update_status();
      }
    };

    Slide.prototype.stop = function() {
      if (this.enable) {
        this.enable = false;
        this.show.stop();
        this.control.stop();
        return this.progress_bar.stop();
      }
    };

    Slide.prototype.update_status = function() {
      if (this.enable) {
        if (this.control) {
          this.control.update_status();
        }
        if (this.progress_bar) {
          return this.progress_bar.update_status();
        }
      }
    };

    return Slide;

  })();

  Show = (function() {
    function Show(slide) {
      var child, fragment, page, _i, _len, _ref, _show;
      this.slide = slide;
      this.index = -1;
      this.length = -1;
      this.children = [];
      this.original_children = [];
      this.node = document.createElement('div');
      this.node.className = 'sj-show';
      this.node.style.height = this.slide.height;
      this.node.style.display = 'none';
      _ref = this.slide.node.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (!page) {
          page = new Page(this.slide);
        }
        if (child.tagName === this.slide["break"]) {
          this.add(page);
          page = new Page(this.slide);
        } else {
          fragment = new Fragment(this.slide);
          fragment.add(child.cloneNode(true));
          page.add(fragment);
        }
        this.original_children.push(child);
      }
      this.add(page);
      if (this.length !== 0) {
        this.index = 0;
      }
      _show = this;
      Util.add_event(this.node, 'mousedown', function(event) {
        return _show.next_fragment();
      });
      if (this.node.addEventListener) {
        this.node.addEventListener('touchstart', function(event) {
          return _show.touchstart(event);
        }, false);
        this.node.addEventListener('touchend', function(event) {
          return _show.touchend(event);
        }, false);
      }
      this.beginX = 0;
      this.beginY = 0;
      this.endX = 0;
      this.endY = 0;
      this.slide.node.appendChild(this.node);
    }

    Show.prototype.start = function() {
      var child, _i, _len, _ref;
      _ref = this.original_children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child.style.display = 'none';
      }
      return this.node.style.display = 'block';
    };

    Show.prototype.stop = function() {
      var child, _i, _len, _ref, _results;
      this.node.style.display = 'none';
      _ref = this.original_children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(child.style.display = '');
      }
      return _results;
    };

    Show.prototype.touchstart = function(event) {
      if (this.slide.enable && Util.has_class(this.slide.node, 'sj-full-screen')) {
        this.beginX = event.touches[0].clientX;
        return this.beginY = event.touches[0].clientY;
      } else {
        this.beginX = 0;
        this.beginY = 0;
        this.endX = 0;
        return this.endY = 0;
      }
    };

    Show.prototype.touchend = function(event) {
      var lengthX, lengthY;
      if (this.slide.enable && Util.has_class(this.slide.node, 'sj-full-screen')) {
        this.endX = event.changedTouches[0].clientX;
        this.endY = event.changedTouches[0].clientY;
        lengthX = this.endX - this.beginX;
        lengthY = this.endY - this.beginY;
        if (Math.abs(lengthX) > Math.abs(lengthY)) {
          if (lengthX >= 100) {
            this.previous_fragment();
          } else if (lengthX <= -100) {
            this.next_fragment();
          }
        } else {
          if (lengthY >= 100) {
            this.previous_page();
          } else if (lengthY <= -100) {
            this.next_page();
          }
        }
      }
      this.beginX = 0;
      this.beginY = 0;
      this.endX = 0;
      return this.endY = 0;
    };

    Show.prototype.add = function(page) {
      if (page) {
        this.children.push(page);
        this.node.appendChild(page.node);
        this.slide.index = 0;
        return this.length = this.children.length;
      }
    };

    Show.prototype.is_first_page = function() {
      return this.index === 0;
    };

    Show.prototype.is_last_page = function() {
      return this.index === this.length - 1;
    };

    Show.prototype.is_first_fragment = function() {
      return this.is_first_page() && this.children[this.index].is_first();
    };

    Show.prototype.is_last_fragment = function() {
      return this.is_last_page() && this.children[this.index].is_end();
    };

    Show.prototype.next_page = function() {
      var _ref;
      if ((0 <= (_ref = this.index) && _ref < this.length - 1)) {
        if (this.children[this.index].is_end()) {
          this.children[this.index].hide();
          this.index = this.index + 1;
          this.children[this.index].show();
        } else {
          this.children[this.index].show();
        }
      } else if (this.index === this.length - 1 && this.slide.cycle) {
        if (this.children[this.index].is_end()) {
          this.children[this.index].hide();
          this.index = 0;
          this.children[this.index].show();
        } else {
          this.children[this.index].show();
        }
      }
      return this.slide.update_status();
    };

    Show.prototype.previous_page = function() {
      var _ref;
      if ((0 < (_ref = this.index) && _ref < this.length)) {
        this.children[this.index].hide();
        this.index = this.index - 1;
        this.children[this.index].show();
      } else if (this.index === 0 && this.slide.cycle) {
        this.children[this.index].hide();
        this.index = this.length - 1;
        this.children[this.index].show();
      }
      return this.slide.update_status();
    };

    Show.prototype.next_fragment = function() {
      var _ref, _ref1;
      if (this.index === this.length - 1 && this.children[this.index].is_end()) {
        if (this.slide.cycle) {
          this.children[this.index].hide();
          this.index = 0;
          this.children[this.index].next();
        }
      } else if ((0 <= (_ref = this.index) && _ref < this.length) && this.children[this.index].is_end()) {
        this.children[this.index].hide();
        this.index = this.index + 1;
        this.children[this.index].next();
      } else if ((0 <= (_ref1 = this.index) && _ref1 < this.length)) {
        this.children[this.index].next();
      }
      return this.slide.update_status();
    };

    Show.prototype.previous_fragment = function() {
      var _ref, _ref1;
      if (this.index === 0 && this.children[this.index].is_first()) {
        if (this.slide.cycle) {
          this.children[this.index].hide();
          this.index = this.length - 1;
          this.children[this.index].show();
        }
      } else if ((0 <= (_ref = this.index) && _ref < this.length) && this.children[this.index].is_first()) {
        this.children[this.index].hide();
        this.index = this.index - 1;
        this.children[this.index].show();
      } else if ((0 <= (_ref1 = this.index) && _ref1 < this.length)) {
        this.children[this.index].previous();
      }
      return this.slide.update_status();
    };

    return Show;

  })();

  Page = (function() {
    function Page(slide) {
      this.slide = slide;
      this.node = document.createElement('div');
      Util.add_class(this.node, 'sj-page');
      this.children = [];
      this.index = -1;
      this.total_count = 0;
    }

    Page.prototype.add = function(fragment) {
      if (fragment) {
        this.children.push(fragment);
        this.node.appendChild(fragment.node);
        this.total_count = this.children.length;
        return this.hide();
      }
    };

    Page.prototype.is_end = function() {
      return this.index === this.total_count - 1;
    };

    Page.prototype.is_first = function() {
      return this.index === 0 || this.index === -1;
    };

    Page.prototype.next = function() {
      var index;
      this.node.style.display = 'block';
      index = this.index + 1;
      if ((0 <= index && index < this.total_count)) {
        this.children[index].show();
        return this.index = index;
      }
    };

    Page.prototype.previous = function() {
      var _ref;
      if ((0 <= (_ref = this.index) && _ref < this.total_count)) {
        this.children[this.index].hide();
        return this.index = this.index - 1;
      }
    };

    Page.prototype.show = function() {
      var i, _i, _ref;
      this.node.style.display = 'block';
      for (i = _i = 0, _ref = this.total_count - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.children[i].show();
      }
      return this.index = this.total_count - 1;
    };

    Page.prototype.hide = function() {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.total_count - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.children[i].hide();
      }
      if (this.total_count > 0) {
        this.index = -1;
      }
      return this.node.style.display = 'none';
    };

    return Page;

  })();

  Fragment = (function() {
    function Fragment(slide) {
      this.slide = slide;
      this.node = document.createElement('div');
      Util.add_class(this.node, 'sj-fragment');
      if (this.slide.fade) {
        Util.add_class(this.node, 'sj-fade');
      }
      this.hide();
    }

    Fragment.prototype.add = function(text) {
      if (text) {
        return this.node.appendChild(text);
      }
    };

    Fragment.prototype.show = function() {
      return this.node.style.display = 'block';
    };

    Fragment.prototype.hide = function() {
      return this.node.style.display = 'none';
    };

    return Fragment;

  })();

  Control = (function() {
    function Control(slide) {
      this.slide = slide;
      this.node = document.createElement('div');
      this.node.className = 'sj-control';
      this.node.style.display = 'none';
      this.page_info = new PageInfo(this.slide, this);
      this.previous_page = new PreviousPage(this.slide, this);
      this.previous_fragment = new PreviousFragment(this.slide, this);
      this.next_fragment = new NextFragment(this.slide, this);
      this.next_page = new NextPage(this.slide, this);
      this.full_screen = new FullScreen(this.slide, this);
      this.slide.node.appendChild(this.node);
    }

    Control.prototype.start = function() {
      return this.node.style.display = 'block';
    };

    Control.prototype.stop = function() {
      return this.node.style.display = 'none';
    };

    Control.prototype.update_status = function() {
      if (this.previous_page) {
        this.previous_page.update_status();
      }
      if (this.previous_fragment) {
        this.previous_fragment.update_status();
      }
      if (this.next_fragment) {
        this.next_fragment.update_status();
      }
      if (this.next_page) {
        this.next_page.update_status();
      }
      if (this.full_screen) {
        this.full_screen.update_status();
      }
      if (this.page_info) {
        return this.page_info.update_status();
      }
    };

    return Control;

  })();

  Button = (function() {
    function Button(slide, parent) {
      var _button;
      this.slide = slide;
      this.parent = parent;
      this.show = this.slide.show;
      this.node = document.createElement('div');
      this.parent.node.appendChild(this.node);
      _button = this;
      if (this.mouse_down) {
        Util.add_event(this.node, 'mousedown', function(event) {
          return _button.mouse_down(_button, event);
        });
      }
      if (this.key_up) {
        Util.add_event(document, 'keyup', function(event) {
          return _button.key_up(_button, event);
        });
      }
      if (this.init) {
        this.init(_button);
      }
    }

    Button.prototype.mouse_down = function(button, event) {
      if (this.slide.enable) {
        return button.run(button, event);
      }
    };

    Button.prototype.key_up = function(button, event) {
      if (this.slide.enable && this.keyCode && event.keyCode === this.keyCode) {
        return button.run(button, event);
      }
    };

    return Button;

  })();

  PreviousPage = (function(_super) {
    __extends(PreviousPage, _super);

    function PreviousPage() {
      _ref = PreviousPage.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PreviousPage.prototype.init = function(button) {
      this.node.className = 'sj-previous-page-button';
      this.node.setAttribute('title', '上一页');
      return this.keyCode = 38;
    };

    PreviousPage.prototype.run = function(button, event) {
      return button.slide.show.previous_page();
    };

    PreviousPage.prototype.update_status = function() {
      if (!this.slide.cycle && this.slide.show.is_first_page()) {
        return Util.add_class(this.node, 'sj-button-disable');
      } else {
        return Util.remove_class(this.node, 'sj-button-disable');
      }
    };

    return PreviousPage;

  })(Button);

  PreviousFragment = (function(_super) {
    __extends(PreviousFragment, _super);

    function PreviousFragment() {
      _ref1 = PreviousFragment.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    PreviousFragment.prototype.init = function(button) {
      this.node.className = 'sj-previous-fragment-button';
      this.node.setAttribute('title', '上一段');
      return this.keyCode = 37;
    };

    PreviousFragment.prototype.run = function(button, event) {
      return button.slide.show.previous_fragment();
    };

    PreviousFragment.prototype.update_status = function() {
      if (!this.slide.cycle && this.slide.show.is_first_fragment()) {
        return Util.add_class(this.node, 'sj-button-disable');
      } else {
        return Util.remove_class(this.node, 'sj-button-disable');
      }
    };

    return PreviousFragment;

  })(Button);

  NextFragment = (function(_super) {
    __extends(NextFragment, _super);

    function NextFragment() {
      _ref2 = NextFragment.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    NextFragment.prototype.init = function(button) {
      this.node.className = 'sj-next-fragmet-button';
      this.node.setAttribute('title', '下一段');
      return this.keyCode = 39;
    };

    NextFragment.prototype.run = function(button, event) {
      return button.slide.show.next_fragment();
    };

    NextFragment.prototype.update_status = function() {
      if (!this.slide.cycle && this.slide.show.is_last_fragment()) {
        return Util.add_class(this.node, 'sj-button-disable');
      } else {
        return Util.remove_class(this.node, 'sj-button-disable');
      }
    };

    return NextFragment;

  })(Button);

  NextPage = (function(_super) {
    __extends(NextPage, _super);

    function NextPage() {
      _ref3 = NextPage.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    NextPage.prototype.init = function(button) {
      this.node.className = 'sj-next-page-button';
      this.node.setAttribute('title', '下一页');
      return this.keyCode = 40;
    };

    NextPage.prototype.run = function(button, event) {
      return button.slide.show.next_page();
    };

    NextPage.prototype.update_status = function() {
      if (!this.slide.cycle && this.slide.show.is_last_page()) {
        return Util.add_class(this.node, 'sj-button-disable');
      } else {
        return Util.remove_class(this.node, 'sj-button-disable');
      }
    };

    return NextPage;

  })(Button);

  FullScreen = (function(_super) {
    __extends(FullScreen, _super);

    function FullScreen() {
      _ref4 = FullScreen.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    FullScreen.prototype.init = function(button) {
      var listener_name, _i, _len, _ref5, _results;
      this.node.className = 'sj-full-screen-button';
      this.node.setAttribute('title', '全屏');
      this.is_full_screen = false;
      _ref5 = ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange'];
      _results = [];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        listener_name = _ref5[_i];
        _results.push(Util.add_event(document, listener_name, function(event) {
          if (button.is_full_screen) {
            Util.add_class(button.slide.node, 'sj-full-screen');
          } else {
            Util.remove_class(button.slide.node, 'sj-full-screen');
          }
          return button.is_full_screen = false;
        }));
      }
      return _results;
    };

    FullScreen.prototype.run = function(button, event) {
      Util.full_screen(button.slide.node);
      return this.is_full_screen = true;
    };

    FullScreen.prototype.update_status = function() {};

    return FullScreen;

  })(Button);

  PageInfo = (function() {
    function PageInfo(slide, parent) {
      this.slide = slide;
      this.parent = parent;
      this.node = document.createElement('div');
      this.node.className = 'sj-page-info';
      this.current_page_node = document.createElement('span');
      this.current_page_node.className = 'current-page';
      this.current_page_node.innerHTML = this.slide.index;
      this.node.appendChild(this.current_page_node);
      this.delimiter_node = document.createElement('span');
      this.delimiter_node.className = 'delimiter';
      this.delimiter_node.innerHTML = '/';
      this.node.appendChild(this.delimiter_node);
      this.total_page_node = document.createElement('span');
      this.total_page_node.className = 'total_page';
      this.total_page_node.innerHTML = this.slide.show.length;
      this.node.appendChild(this.total_page_node);
      this.parent.node.appendChild(this.node);
    }

    PageInfo.prototype.update_status = function() {
      return this.current_page_node.innerHTML = this.slide.show.index + 1;
    };

    return PageInfo;

  })();

  ProgressBar = (function() {
    function ProgressBar(slide) {
      this.slide = slide;
      this.node = document.createElement('div');
      this.node.className = 'sj-progress-bar';
      this.node.style.display = 'none';
      this.inner_node = document.createElement('div');
      this.inner_node.className = 'sj-progress-inner';
      this.node.appendChild(this.inner_node);
      this.slide.node.appendChild(this.node);
    }

    ProgressBar.prototype.start = function() {
      return this.node.style.display = 'block';
    };

    ProgressBar.prototype.stop = function() {
      return this.node.style.display = 'none';
    };

    ProgressBar.prototype.update_status = function() {
      if (this.slide.show.length !== -1) {
        return this.inner_node.style.width = "" + (this.slide.show.index / (this.slide.show.length - 1) * 100) + "%";
      }
    };

    return ProgressBar;

  })();

  window.Slide = Slide;

}).call(this);
